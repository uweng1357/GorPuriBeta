"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dotenv";
exports.ids = ["vendor-chunks/dotenv"];
exports.modules = {

/***/ "(rsc)/./node_modules/dotenv/lib/main.js":
/*!*****************************************!*\
  !*** ./node_modules/dotenv/lib/main.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst os = __webpack_require__(/*! os */ \"os\");\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst packageJson = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/dotenv/package.json\");\nconst version = packageJson.version;\n// Array of tips to display randomly\nconst TIPS = [\n    \"\\uD83D\\uDD10 encrypt with Dotenvx: https://dotenvx.com\",\n    \"\\uD83D\\uDD10 prevent committing .env to code: https://dotenvx.com/precommit\",\n    \"\\uD83D\\uDD10 prevent building .env in docker: https://dotenvx.com/prebuild\",\n    \"\\uD83D\\uDCE1 observe env with Radar: https://dotenvx.com/radar\",\n    \"\\uD83D\\uDCE1 auto-backup env with Radar: https://dotenvx.com/radar\",\n    \"\\uD83D\\uDCE1 version env with Radar: https://dotenvx.com/radar\",\n    \"\\uD83D\\uDEE0️  run anywhere with `dotenvx run -- yourcommand`\",\n    \"⚙️  specify custom .env file path with { path: '/custom/path/.env' }\",\n    \"⚙️  enable debug logging with { debug: true }\",\n    \"⚙️  override existing env vars with { override: true }\",\n    \"⚙️  suppress all logs with { quiet: true }\",\n    \"⚙️  write to custom object with { processEnv: myObject }\",\n    \"⚙️  load multiple .env files with { path: ['.env.local', '.env'] }\"\n];\n// Get a random tip from the tips array\nfunction _getRandomTip() {\n    return TIPS[Math.floor(Math.random() * TIPS.length)];\n}\nfunction parseBoolean(value) {\n    if (typeof value === \"string\") {\n        return ![\n            \"false\",\n            \"0\",\n            \"no\",\n            \"off\",\n            \"\"\n        ].includes(value.toLowerCase());\n    }\n    return Boolean(value);\n}\nfunction supportsAnsi() {\n    return process.stdout.isTTY // && process.env.TERM !== 'dumb'\n    ;\n}\nfunction dim(text) {\n    return supportsAnsi() ? `\\x1b[2m${text}\\x1b[0m` : text;\n}\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n// Parse src into an Object\nfunction parse(src) {\n    const obj = {};\n    // Convert buffer to string\n    let lines = src.toString();\n    // Convert line breaks to same format\n    lines = lines.replace(/\\r\\n?/mg, \"\\n\");\n    let match;\n    while((match = LINE.exec(lines)) != null){\n        const key = match[1];\n        // Default undefined or null to empty string\n        let value = match[2] || \"\";\n        // Remove whitespace\n        value = value.trim();\n        // Check if double quoted\n        const maybeQuote = value[0];\n        // Remove surrounding quotes\n        value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\");\n        // Expand newlines if double quoted\n        if (maybeQuote === '\"') {\n            value = value.replace(/\\\\n/g, \"\\n\");\n            value = value.replace(/\\\\r/g, \"\\r\");\n        }\n        // Add to object\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _parseVault(options) {\n    options = options || {};\n    const vaultPath = _vaultPath(options);\n    options.path = vaultPath // parse .env.vault\n    ;\n    const result = DotenvModule.configDotenv(options);\n    if (!result.parsed) {\n        const err = new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`);\n        err.code = \"MISSING_DATA\";\n        throw err;\n    }\n    // handle scenario for comma separated keys - for use with key rotation\n    // example: DOTENV_KEY=\"dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenvx.com/vault/.env.vault?environment=prod\"\n    const keys = _dotenvKey(options).split(\",\");\n    const length = keys.length;\n    let decrypted;\n    for(let i = 0; i < length; i++){\n        try {\n            // Get full key\n            const key = keys[i].trim();\n            // Get instructions for decrypt\n            const attrs = _instructions(result, key);\n            // Decrypt\n            decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key);\n            break;\n        } catch (error) {\n            // last key\n            if (i + 1 >= length) {\n                throw error;\n            }\n        // try next key\n        }\n    }\n    // Parse decrypted .env string\n    return DotenvModule.parse(decrypted);\n}\nfunction _warn(message) {\n    console.error(`[dotenv@${version}][WARN] ${message}`);\n}\nfunction _debug(message) {\n    console.log(`[dotenv@${version}][DEBUG] ${message}`);\n}\nfunction _log(message) {\n    console.log(`[dotenv@${version}] ${message}`);\n}\nfunction _dotenvKey(options) {\n    // prioritize developer directly setting options.DOTENV_KEY\n    if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n        return options.DOTENV_KEY;\n    }\n    // secondary infra already contains a DOTENV_KEY environment variable\n    if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n        return process.env.DOTENV_KEY;\n    }\n    // fallback to empty string\n    return \"\";\n}\nfunction _instructions(result, dotenvKey) {\n    // Parse DOTENV_KEY. Format is a URI\n    let uri;\n    try {\n        uri = new URL(dotenvKey);\n    } catch (error) {\n        if (error.code === \"ERR_INVALID_URL\") {\n            const err = new Error(\"INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        }\n        throw error;\n    }\n    // Get decrypt key\n    const key = uri.password;\n    if (!key) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing key part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get environment\n    const environment = uri.searchParams.get(\"environment\");\n    if (!environment) {\n        const err = new Error(\"INVALID_DOTENV_KEY: Missing environment part\");\n        err.code = \"INVALID_DOTENV_KEY\";\n        throw err;\n    }\n    // Get ciphertext payload\n    const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`;\n    const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n    ;\n    if (!ciphertext) {\n        const err = new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`);\n        err.code = \"NOT_FOUND_DOTENV_ENVIRONMENT\";\n        throw err;\n    }\n    return {\n        ciphertext,\n        key\n    };\n}\nfunction _vaultPath(options) {\n    let possibleVaultPath = null;\n    if (options && options.path && options.path.length > 0) {\n        if (Array.isArray(options.path)) {\n            for (const filepath of options.path){\n                if (fs.existsSync(filepath)) {\n                    possibleVaultPath = filepath.endsWith(\".vault\") ? filepath : `${filepath}.vault`;\n                }\n            }\n        } else {\n            possibleVaultPath = options.path.endsWith(\".vault\") ? options.path : `${options.path}.vault`;\n        }\n    } else {\n        possibleVaultPath = path.resolve(process.cwd(), \".env.vault\");\n    }\n    if (fs.existsSync(possibleVaultPath)) {\n        return possibleVaultPath;\n    }\n    return null;\n}\nfunction _resolveHome(envPath) {\n    return envPath[0] === \"~\" ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n}\nfunction _configVault(options) {\n    const debug = parseBoolean(process.env.DOTENV_CONFIG_DEBUG || options && options.debug);\n    const quiet = parseBoolean(process.env.DOTENV_CONFIG_QUIET || options && options.quiet);\n    if (debug || !quiet) {\n        _log(\"Loading env from encrypted .env.vault\");\n    }\n    const parsed = DotenvModule._parseVault(options);\n    let processEnv = process.env;\n    if (options && options.processEnv != null) {\n        processEnv = options.processEnv;\n    }\n    DotenvModule.populate(processEnv, parsed, options);\n    return {\n        parsed\n    };\n}\nfunction configDotenv(options) {\n    const dotenvPath = path.resolve(process.cwd(), \".env\");\n    let encoding = \"utf8\";\n    let processEnv = process.env;\n    if (options && options.processEnv != null) {\n        processEnv = options.processEnv;\n    }\n    let debug = parseBoolean(processEnv.DOTENV_CONFIG_DEBUG || options && options.debug);\n    let quiet = parseBoolean(processEnv.DOTENV_CONFIG_QUIET || options && options.quiet);\n    if (options && options.encoding) {\n        encoding = options.encoding;\n    } else {\n        if (debug) {\n            _debug(\"No encoding is specified. UTF-8 is used by default\");\n        }\n    }\n    let optionPaths = [\n        dotenvPath\n    ] // default, look for .env\n    ;\n    if (options && options.path) {\n        if (!Array.isArray(options.path)) {\n            optionPaths = [\n                _resolveHome(options.path)\n            ];\n        } else {\n            optionPaths = [] // reset default\n            ;\n            for (const filepath of options.path){\n                optionPaths.push(_resolveHome(filepath));\n            }\n        }\n    }\n    // Build the parsed data in a temporary object (because we need to return it).  Once we have the final\n    // parsed data, we will combine it with process.env (or options.processEnv if provided).\n    let lastError;\n    const parsedAll = {};\n    for (const path of optionPaths){\n        try {\n            // Specifying an encoding returns a string instead of a buffer\n            const parsed = DotenvModule.parse(fs.readFileSync(path, {\n                encoding\n            }));\n            DotenvModule.populate(parsedAll, parsed, options);\n        } catch (e) {\n            if (debug) {\n                _debug(`Failed to load ${path} ${e.message}`);\n            }\n            lastError = e;\n        }\n    }\n    const populated = DotenvModule.populate(processEnv, parsedAll, options);\n    // handle user settings DOTENV_CONFIG_ options inside .env file(s)\n    debug = parseBoolean(processEnv.DOTENV_CONFIG_DEBUG || debug);\n    quiet = parseBoolean(processEnv.DOTENV_CONFIG_QUIET || quiet);\n    if (debug || !quiet) {\n        const keysCount = Object.keys(populated).length;\n        const shortPaths = [];\n        for (const filePath of optionPaths){\n            try {\n                const relative = path.relative(process.cwd(), filePath);\n                shortPaths.push(relative);\n            } catch (e) {\n                if (debug) {\n                    _debug(`Failed to load ${filePath} ${e.message}`);\n                }\n                lastError = e;\n            }\n        }\n        _log(`injecting env (${keysCount}) from ${shortPaths.join(\",\")} ${dim(`-- tip: ${_getRandomTip()}`)}`);\n    }\n    if (lastError) {\n        return {\n            parsed: parsedAll,\n            error: lastError\n        };\n    } else {\n        return {\n            parsed: parsedAll\n        };\n    }\n}\n// Populates process.env from .env file\nfunction config(options) {\n    // fallback to original dotenv if DOTENV_KEY is not set\n    if (_dotenvKey(options).length === 0) {\n        return DotenvModule.configDotenv(options);\n    }\n    const vaultPath = _vaultPath(options);\n    // dotenvKey exists but .env.vault file does not exist\n    if (!vaultPath) {\n        _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`);\n        return DotenvModule.configDotenv(options);\n    }\n    return DotenvModule._configVault(options);\n}\nfunction decrypt(encrypted, keyStr) {\n    const key = Buffer.from(keyStr.slice(-64), \"hex\");\n    let ciphertext = Buffer.from(encrypted, \"base64\");\n    const nonce = ciphertext.subarray(0, 12);\n    const authTag = ciphertext.subarray(-16);\n    ciphertext = ciphertext.subarray(12, -16);\n    try {\n        const aesgcm = crypto.createDecipheriv(\"aes-256-gcm\", key, nonce);\n        aesgcm.setAuthTag(authTag);\n        return `${aesgcm.update(ciphertext)}${aesgcm.final()}`;\n    } catch (error) {\n        const isRange = error instanceof RangeError;\n        const invalidKeyLength = error.message === \"Invalid key length\";\n        const decryptionFailed = error.message === \"Unsupported state or unable to authenticate data\";\n        if (isRange || invalidKeyLength) {\n            const err = new Error(\"INVALID_DOTENV_KEY: It must be 64 characters long (or more)\");\n            err.code = \"INVALID_DOTENV_KEY\";\n            throw err;\n        } else if (decryptionFailed) {\n            const err = new Error(\"DECRYPTION_FAILED: Please check your DOTENV_KEY\");\n            err.code = \"DECRYPTION_FAILED\";\n            throw err;\n        } else {\n            throw error;\n        }\n    }\n}\n// Populate process.env with parsed values\nfunction populate(processEnv, parsed, options = {}) {\n    const debug = Boolean(options && options.debug);\n    const override = Boolean(options && options.override);\n    const populated = {};\n    if (typeof parsed !== \"object\") {\n        const err = new Error(\"OBJECT_REQUIRED: Please check the processEnv argument being passed to populate\");\n        err.code = \"OBJECT_REQUIRED\";\n        throw err;\n    }\n    // Set process.env\n    for (const key of Object.keys(parsed)){\n        if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n            if (override === true) {\n                processEnv[key] = parsed[key];\n                populated[key] = parsed[key];\n            }\n            if (debug) {\n                if (override === true) {\n                    _debug(`\"${key}\" is already defined and WAS overwritten`);\n                } else {\n                    _debug(`\"${key}\" is already defined and was NOT overwritten`);\n                }\n            }\n        } else {\n            processEnv[key] = parsed[key];\n            populated[key] = parsed[key];\n        }\n    }\n    return populated;\n}\nconst DotenvModule = {\n    configDotenv,\n    _configVault,\n    _parseVault,\n    config,\n    decrypt,\n    parse,\n    populate\n};\nmodule.exports.configDotenv = DotenvModule.configDotenv;\nmodule.exports._configVault = DotenvModule._configVault;\nmodule.exports._parseVault = DotenvModule._parseVault;\nmodule.exports.config = DotenvModule.config;\nmodule.exports.decrypt = DotenvModule.decrypt;\nmodule.exports.parse = DotenvModule.parse;\nmodule.exports.populate = DotenvModule.populate;\nmodule.exports = DotenvModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dotenv/lib/main.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/dotenv/package.json":
/*!******************************************!*\
  !*** ./node_modules/dotenv/package.json ***!
  \******************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"dotenv","version":"17.2.2","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=text --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}');

/***/ })

};
;